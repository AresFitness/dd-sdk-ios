{% from 'macros.swift.j2' import swift_type with context %}
{% from 'macros.swift.j2' import swift_property with context %}

/// {{ schema.description }}
public struct {{ swift_type(schema, key) }}: Codable {
{% if schema.properties -%}
{% for key, property in schema.properties.items() %}

    /// {{ property.description }}
    {{ swift_property(key, property) }}
{% endfor %}
{% endif -%}

{% if schema.additionalProperties %}

    var additionalProperties: [String: Encodable]
{% endif %}

{%- if schema.properties %}
{% for key, schema in schema.properties.items() if schema['$parent'] == id %}
    {% filter indent %}{% include "schema.swift.j2" %}{% endfilter %}
{% endfor %}
{%- endif %}

    public init(from decoder: Decoder) throws {
        {% if schema.properties %}
        let container = try decoder.container(keyedBy: DynamicCodingKey.self)

        {%- for key, property in schema.properties.items() if property.const +%}

        guard try container.decode({{ swift_type(property, key) }}.self, forKey: .k("{{ key }}")) == self.{{ key|camelcase }} else {
            throw DecodingError.dataCorruptedError(
                forKey: .k("{{ key }}"),
                in: container,
                debugDescription: "{{ swift_type(schema, key) }} cannot be decoded: constant mismtach"
            )
        }
        {% endfor %}
        
        {% for key, property in schema.properties.items() if not property.const %}
        self.{{ key|camelcase }} = try container.decode({{ swift_type(property, key) }}.self, forKey: .k("{{ key }}"))
        {% endfor %}
        {% endif -%}

        {%- if schema.additionalProperties %}

        {% if schema.properties %}
        self.additionalProperties = try Set(container.allKeys)
            .subtracting([
            {% for key in schema.properties %}
                .k("{{ key }}"),
            {% endfor %}
            ])
            .reduce(into: [:]) {
                $0[$1.stringValue] = try container.decode(CodableValue.self, forKey: $1)
            }
        {% else %}
        self.additionalProperties = try decoder.singleValueContainer()
            .decode([String: CodableValue].self)
        {% endif %}
        {% endif %}
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: DynamicCodingKey.self)
        {% for key in schema.properties %}
        try container.encode({{ key|camelcase }}, forKey: .k("{{ key }}"))
        {% endfor %}

        {%- if schema.additionalProperties %}
        try additionalProperties.forEach { 
            try container.encode(AnyEncodable($1), forKey: .k($0)) 
        }
        {% endif %}
    }
}
